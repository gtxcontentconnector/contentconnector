#=================================================================================================
# Lucence searcher configuration file
#=================================================================================================

#-------------------------------------------------------------------------------------------------
# General Section
#-------------------------------------------------------------------------------------------------
# Set the RequestProcessor to LuceneRequestProcessor that fetches the objects from the lucene index
rp.1.rpClass=com.gentics.cr.lucene.search.LuceneRequestProcessor

# Configure the lucene analyzers per field in the following file
rp.1.analyzerconfig=${com.gentics.portalnode.confpath}/rest/analyzer.properties

# The following line configures the main index location
#rp.1.indexLocations.0.path=${com.gentics.portalnode.confpath}/index/index
# use the same value as in the indexer.properties.
rp.1.indexLocations.0.path=&{indexer.index.DEFAULT.indexLocations.1.path}

# If you are using a LuceneMultiIndexLocation you can configure more than one location to search in
#rp.1.indexLocations.1.path=${com.gentics.portalnode.confpath}/index_1/index
#rp.1.indexLocations.2.path=${com.gentics.portalnode.confpath}/index_2/index

# The following line would open a index location in the system memory (this is not recommended for 
# production environments)
#rp.1.indexLocations.3.path=RAM

# Set the class of the IndexLocation that should be used
rp.1.indexLocationClass=com.gentics.cr.lucene.indexer.index.LuceneSingleIndexLocation

##configure a custom collector (not included in content connector)
##in this case it is a collector to check the permissions of the search results
#rp.1.collectorClass=org.apache.lucene.search.PermissionsCollector
##all properties used in rp.1.collector are put into the collector config
##here we have a sample config with another custom class and an additional datasource for the permissions
#rp.1.collector.permissionCheckerClass=your.company.PermissionChecker
#rp.1.collector.permissionChecker.ds.ds-handle.type=jdbc
#rp.1.collector.permissionChecker.ds.ds-handle.driverClass=com.mysql.jdbc.Driver
#rp.1.collector.permissionChecker.ds.ds-handle.url=jdbc:mysql://127.0.0.1:3306/permissiondb?user=x&password=y

# Did you mean functionality
# Enables the did you mean functionality
rp.1.didyoumean=true

# Sets the minimum score that works as a threshold. For results below that score a did you mean suggestion will be computed
rp.1.didyoumeanminscore=0.01

# Sets the the worddistancescore that has to be reached
rp.1.didyoumeanmindistancescore=0.75

# Sets the minimal frequecy the suggested term must have	
rp.1.didyoumeanmindocfreq=5

#Enables didyoumean if we got 0 or less results
#rp.1.didyoumean_activatelimit=0

#Enable didyoumean for terms in the index, otherwhise terms included in the
# index are not checked for better terms
#rp.1.didyoumean_forexisitingterms=false

# Enables or disables the bestquery calculation (1 Result)
rp.1.didyoumeanbestquery=false
# Enables or disables the bestquery calculation (1 or more Results ordered by resultsize)
rp.1.didyoumeanbestqueryadvanced=false
# Sets the fields that are being used to suggest the best terms
rp.1.didyoumeanfields=content,teaser_title,teaser_text
rp.1.didyoumeanUseIndexExtension=true
# Configures the location where the didyoumeanindex will be stored
# For help on the options please see the main indexlocation configuration
rp.1.didyoumeanlocation.indexLocationClass=com.gentics.cr.lucene.indexer.index.LuceneSingleIndexLocation
rp.1.didyoumeanlocation.indexLocations.0.path=${com.gentics.portalnode.confpath}/index/dym
rp.1.didyoumeanlocation.reopencheck=true
# Configures the location of the index for that the didyoumeanindex will be generated
# For help on the options please see the main indexlocation configuration
#rp.1.srcindexlocation.indexLocationClass=com.gentics.cr.lucene.indexer.index.LuceneSingleIndexLocation
#rp.1.srcindexlocation.indexLocations.0.path=${com.gentics.portalnode.confpath}/index/index
#rp.1.srcindexlocation.analyzerconfig=${com.gentics.portalnode.confpath}/rest/analyzer.properties
#rp.1.srcindexlocation.reopencheck=true


# Check if index should be reopened each search (set this to true if the index changes often)
# This setting is used for configurations with a remote indexer (running in a different jvm)
# If the index job runs in the same jvm lucene has internal methods to notify the different threads
# - true means we only check if the file exists and remove it afterwards
# - timestamp means we check if the timestamp is newer than last time and we will not remove
#   it so one index can be used by multiple searchers
# - false means the index is not checked for a reopen file
rp.1.reopencheck=true

# idattribute: attribute that contains the identifyer in the lucene index
rp.1.idattribute=contentid

# Searched attributes: default attribute that is being searched if no other is specified
rp.1.searchedattributes=content

# Searchcount: number of hits that is returned if no other specified
rp.1.searchcount=30

# Score attribute: under which the score of each hit can be requested
rp.1.scoreattribute=score

# getstoredattributes: if this is set to true, all stored attributes are returned
rp.1.getstoredattributes=true

#throw an exception if the maxclausecount is reached and catched, this is useful for handling in the ContentRepository#respondWithError()
#rp.1.failOnMaxClauses=true

# Configuration of a specific query parser to use in the search
#rp.1.queryparser.class=com.gentics.cr.lucene.search.query.CRComplexPhraseQueryParser
#rp.1.queryparser.maxqueryclauses=2048
## this prevents the query parser from converting wildcardqueris to lowercase, this is usefull if you search in fields
##analyzed by the whitespaceanalyzer.
#rp.1.queryparser.lowercaseexpandedterms=false

#-------------------------------------------------------------------------------------------------
# Highlighters
#-------------------------------------------------------------------------------------------------
rp.1.highlighter.1.class=com.gentics.cr.lucene.search.highlight.PhraseBolder

# Set the attribute that should be highlighted
rp.1.highlighter.1.attribute=content

# Set the rule that defines the objects that should be highlighted with this highlighter
rp.1.highlighter.1.rule=1==1

# Set the max number of fragments that should be present in the highlighted text
rp.1.highlighter.1.fragments=5

# Set the max number of words a fragment should contain
rp.1.highlighter.1.fragmentsize=10

# Set the tags that should be used for highlighting
rp.1.highlighter.1.highlightprefix=<b>
rp.1.highlighter.1.highlightpostfix=</b>

# Set the seperator that should be used between the fragments
rp.1.highlighter.1.fragmentseperator=\ ... 

#add seperator at the beginning of the highlighted text if it doesn't start with
#the beginning of the attribute. at the moment only the phrasebolder supports
#this.
rp.1.highlighter.1.surroundingseperator=true

##Configure the highlighters (sample for VectorBolder)
##Vector Bolder needs Vectors stored in the index so check your indexer.properties
##if index.DEFAULT.CR.FILES.storeVectors is set to true (default)
#rp.1.highlighter.1.class=com.gentics.cr.lucene.search.highlight.VectorBolder
##Set the attribute that should be highlighted
#rp.1.highlighter.1.attribute=content
##Set the rule that defines the objects that should be highlighted with this highlighter
#rp.1.highlighter.1.rule=1==1
##Set the max number of fragments that should be present in the highlighted text
#rp.1.highlighter.1.fragments=5
##Set the max number of characters a fragment should contain
#rp.1.highlighter.1.fragmentsize=100
##Set the tags that should be used for highlighting
#rp.1.highlighter.1.highlightprefix=<b>
#rp.1.highlighter.1.highlightpostfix=</b>
##Set the seperator that should be used between the fragments
#rp.1.highlighter.1.fragmentseperator=\ ... 



#rp.1.highlighter.2.class=com.gentics.cr.lucene.search.highlight.PhraseBolder
#rp.1.highlighter.2.attribute=binarycontent
#rp.1.highlighter.2.rule=1==1
#rp.1.highlighter.2.fragments=5
#rp.1.highlighter.2.fragmentsize=10
#rp.1.highlighter.2.highlightprefix=<b>
#rp.1.highlighter.2.highlightpostfix=</b>
#rp.1.highlighter.2.fragmentseperator=...

#Lucene implementation doesn't support the CONTAINSONEOF attribute at the moment
#so don't add given permissions to the filter rule.
addPermissionsToRule=false

#this can be used to integrate a design in the responce
#cr.velocity.frame=http://mydomain/searchresults.htm
#cr.velocity.frameplaceholder=[Searchresult]

#-------------------------------------------------------------------------------------------------
# Faceted Search Section
# please note that the faceted search feature is still experimental
#-------------------------------------------------------------------------------------------------

# Enables faceted search
#rp.1.facet=true

# The file system location of the taxonomy needed for the faceted search 
# this location should not contain another index
#rp.1.facetconfig.taxonomyPath=${com.gentics.portalnode.confpath}/index/taxonomy

# indicates if the ordinal of a facet category should be included in the results
#rp.1.facetconfig.displayordinal=false

# indicates if the path of a facet category should be included in the results
#rp.1.facetconfig.displaypath=false

# defines the path delimiter of a facet category path
#rp.1.facetconfig.pathdelimiter=/

# defines the the maximum number of (top) category paths which 
# will be retrieved per query
#rp.1.facetconfig.numbercategories=20



## Possible Configuration for a SynonymQueryParser (adds Synonyms to search Query)
#rp.1.queryparser.class=com.gentics.cr.lucene.search.query.SynonymQueryParser
## indexLocation Class and path to the synonym-Index
#rp.1.queryparser.synonymlocation.indexLocationClass=com.gentics.cr.lucene.indexer.index.LuceneSingleIndexLocation
#rp.1.queryparser.synonymlocation.indexLocations.0.path=${com.gentics.portalnode.confpath}/index/sym
## Possibility to set another QueryParser which will be called as super QueryParser
#rp.1.queryparser.queryparser = com.gentics.cr.lucene.OtherQueryParser

